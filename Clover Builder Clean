#!/usr/bin/env bash
set -euo pipefail

# Log functions
say(){ echo -e "\033[36m$*\033[0m"; }
ok(){ echo -e "\033[32m✔ $*\033[0m"; }
warn(){ echo -e "\033[33m⚠ $*\033[0m"; }
err(){ echo -e "\033[31m✘ $*\033[0m"; }

# Initialize variables to prevent unbound variable errors
REPLY=""
SUDO_PASSWORD=""

WORKDIR="$(dirname "$0")"

REPO_DIR="$WORKDIR/CloverBootloader"
CLOVER_REPO="https://github.com/CloverHackyColor/CloverBootloader.git"

say "=== Clover Compiler Builder v7 - Fixed & Robust Version ==="
echo

# SMART PYTHON DETECTION: Find and configure the newest version
say "=== Smart Python Detection ==="

# Detect the newest Python version available
PYTHON_CMD=""
PYTHON_VERSION=""
PYTHON_PATH=""

# Priority order: 3.13 > 3.12 > 3.11 > 3.10 > system
for ver in 3.13 3.12 3.11 3.10; do
    if command -v "python${ver}" >/dev/null 2>&1; then
        PYTHON_CMD="python${ver}"
        PYTHON_VERSION=$("python${ver}" --version 2>&1 | cut -d' ' -f2)
        PYTHON_PATH=$(which "python${ver}")
        say "Found Python: $PYTHON_CMD (version $PYTHON_VERSION)"
        break
    fi
done

# If no specific version found, try generic python3
if [ -z "$PYTHON_CMD" ]; then
    if command -v python3 >/dev/null 2>&1; then
        PYTHON_CMD="python3"
        PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
        PYTHON_PATH=$(which python3)
        say "Found Python: $PYTHON_CMD (version $PYTHON_VERSION)"
    elif command -v python >/dev/null 2>&1; then
        PYTHON_CMD="python"
        PYTHON_VERSION=$(python --version 2>&1 | cut -d' ' -f2)
        PYTHON_PATH=$(which python)
        say "Found Python: $PYTHON_CMD (version $PYTHON_VERSION)"
    fi
fi

# Verify Python version is adequate (3.10+)
if [ -n "$PYTHON_VERSION" ]; then
    MAJOR_VER=$(echo "$PYTHON_VERSION" | cut -d. -f1)
    MINOR_VER=$(echo "$PYTHON_VERSION" | cut -d. -f2)
    
    if [ "$MAJOR_VER" -lt 3 ] || ([ "$MAJOR_VER" -eq 3 ] && [ "$MINOR_VER" -lt 10 ]); then
        warn "Python $PYTHON_VERSION is too old. Installing Python 3.13..."
        PYTHON_CMD="python3.13"
        PYTHON_VERSION=$(python3.13 --version 2>&1 | cut -d' ' -f2)
        PYTHON_PATH=$(which python3.13)
        ok "Python found $PYTHON_VERSION"
    else
        ok "Python $PYTHON_VERSION is adequate for Clover build"
    fi
else
    warn "No Python found. Installing Python 3.13..."
exit 1
fi

# Set Python as the primary command
export PYTHON_CMD="$PYTHON_CMD"
export PYTHON_VERSION="$PYTHON_VERSION"
export PYTHON_PATH="$PYTHON_PATH"

say "Using Python: $PYTHON_CMD (version $PYTHON_VERSION) at $PYTHON_PATH"
echo

# Check setuptools
if ! $PYTHON_CMD -c "import setuptools" 2>/dev/null; then
    say "Installing setuptools for Python $PYTHON_VERSION..."
    ${PYTHON_CMD} -m pip3 install setuptools wheel
    ${PYTHON_CMD} -m pip3 install update setuptools wheel
fi

ok "Python $PYTHON_VERSION and dependencies verified."
echo

# Create work directory if it doesn't exist
if [ ! -d "$WORKDIR" ]; then
    say "Creating work directory: $WORKDIR"
    mkdir -p "$WORKDIR"
fi

cd "$WORKDIR"

# DELETE existing Clover folder (if any)
if [ -d "$REPO_DIR" ]; then
    warn "Existing Clover folder found: $REPO_DIR"
    echo
    read -p "Do you want to delete the existing folder and download a fresh copy? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        say "Deleting existing folder..."
        rm -rf "$REPO_DIR"
        ok "Existing folder deleted successfully!"
        
        # DOWNLOAD Clover git clone
        say "Downloading Clover repository..."
        git clone --recurse-submodules "$CLOVER_REPO" "$REPO_DIR"
        ok "Clover download completed!"
    else
        say "Using existing folder. Updating repository..."
        cd "$REPO_DIR"
        
        # Update existing repository
        if ! git diff-index --quiet HEAD -- 2>/dev/null; then
            warn "Local changes detected. Saving to stash..."
            git stash push -m "Auto-stash $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        
        git pull --recurse-submodules
        git submodule update --init --recursive
        ok "Repository updated successfully!"
    fi
else
    say "No existing Clover folder found."
    
    # DOWNLOAD Clover git clone
    say "Downloading Clover repository..."
    git clone --recurse-submodules "$CLOVER_REPO" "$REPO_DIR"
    ok "Clover download completed!"
fi

# Enter repository directory (if not already there)
if [ "$(pwd)" != "$REPO_DIR" ]; then
    cd "$REPO_DIR"
    say "Current directory: $(pwd)"
fi

# CRITICAL FIX: Clean submodules and local changes to avoid version conflicts
say "Cleaning submodules and local changes..."
git reset --hard HEAD 2>/dev/null || true
git clean -fd 2>/dev/null || true
git submodule foreach --recursive 'git reset --hard HEAD' 2>/dev/null || true
git submodule foreach --recursive 'git clean -fd' 2>/dev/null || true
ok "Repository cleaned!"

# Update submodules with FIXED logic
if [ ! -d "$REPO_DIR/.git" ] || [ "${REPLY:-}" = "y" ]; then
    say "Updating submodules for fresh clone..."
    git submodule update --init --recursive
    ok "Submodules updated!"
else
    # Submodules were already updated above when using existing folder
    say "Submodules already updated during repository update."
fi

# CRITICAL FIX 1: Fix problematic source code - ENHANCED VERSION
say "=== Applying Enhanced Source Code Fixes ==="

ACPI_PARSER_H="OpenCorePkg/Library/OcAcpiLib/AcpiParser.h"
ACPI_PARSER_C="OpenCorePkg/Library/OcAcpiLib/AcpiParser.c"

# Enhanced fix for AcpiParser.h - multi-line comment issue
if [ -f "$ACPI_PARSER_H" ]; then
    # Backup
    [ ! -f "${ACPI_PARSER_H}.backup" ] && cp "$ACPI_PARSER_H" "${ACPI_PARSER_H}.backup"
    
    say "Fixing AcpiParser.h multi-line comment issue..."
    
    # More robust fix for the multi-line comment
    if grep -q "//  DEBUG (( \\\\" "$ACPI_PARSER_H"; then
        # Find the problematic line and fix it
        sed -i '' '/\/\/  DEBUG (( \\\\/s|//  DEBUG (( \\\\|/*  DEBUG (( |' "$ACPI_PARSER_H"
        
        # Find and close the comment properly
        # Look for the closing pattern in the next few lines
        for i in {1..20}; do
            if grep -q "))" "$ACPI_PARSER_H" && ! grep -q ")) */" "$ACPI_PARSER_H"; then
                # Find the first occurrence of )) and close the comment
                sed -i '' '0,/))/s/))/) */' "$ACPI_PARSER_H"
                break
            fi
        done
        
        ok "AcpiParser.h multi-line comment fixed"
    else
        ok "AcpiParser.h already fixed or doesn't need fixing"
    fi
fi

# Enhanced fix for AcpiParser.c - unused variable issue
if [ -f "$ACPI_PARSER_C" ]; then
    # Backup
    [ ! -f "${ACPI_PARSER_C}.backup" ] && cp "$ACPI_PARSER_C" "${ACPI_PARSER_C}.backup"
    
    say "Fixing AcpiParser.c unused variable issue..."
    
    # More robust fix for the unused variable
    if grep -q "UINT8.*\*ScopeNameStart;" "$ACPI_PARSER_C"; then
        # Comment out the variable declaration
        sed -i '' '/UINT8.*\*ScopeNameStart;/s/^  UINT8       \*ScopeNameStart;/  \/\/ UINT8       *ScopeNameStart; \/\/ Unused variable - Fixed by v7/' "$ACPI_PARSER_C"
        
        # Comment out any assignments to this variable
        sed -i '' '/ScopeNameStart[[:space:]]*=/s/^/\/\/ /' "$ACPI_PARSER_C"
        
        ok "AcpiParser.c unused variable fixed"
    else
        ok "AcpiParser.c already fixed or doesn't need fixing"
    fi
fi

ok "Enhanced source code fixes applied successfully!"

# CRITICAL FIX 2: Configure GCC151 for error-free build - ENHANCED VERSION
say "=== Configuring Enhanced GCC151 for Error-Free Build ==="

TOOLS_DEF_TEMPLATE="BaseTools/Conf/tools_def.template"

if [ -f "$TOOLS_DEF_TEMPLATE" ]; then
    # Backup
    [ ! -f "${TOOLS_DEF_TEMPLATE}.backup" ] && cp "$TOOLS_DEF_TEMPLATE" "${TOOLS_DEF_TEMPLATE}.backup"
    
    say "Applying enhanced GCC151 configuration..."
    
    # Enhanced GCC151 configuration with multiple safety flags
    if ! grep -q "GCC151_IA32_CC_FLAGS.*-Wno-error=unused-but-set-variable" "$TOOLS_DEF_TEMPLATE"; then
        # Add comprehensive compilation flags for GCC151
        sed -i '' '/GCC151_IA32_CC_FLAGS/s|$| -Wno-error=unused-but-set-variable -Wno-error=comment -Wno-error=deprecated-non-prototype|' "$TOOLS_DEF_TEMPLATE"
        sed -i '' '/GCC151_X64_CC_FLAGS/s|$| -Wno-error=unused-but-set-variable -Wno-error=comment -Wno-error=deprecated-non-prototype|' "$TOOLS_DEF_TEMPLATE"
        sed -i '' '/GCC151_ARM_CC_FLAGS/s|$| -Wno-error=unused-but-set-variable -Wno-error=comment -Wno-error=deprecated-non-prototype|' "$TOOLS_DEF_TEMPLATE"
        sed -i '' '/GCC151_AARCH64_CC_FLAGS/s|$| -Wno-error=unused-but-set-variable -Wno-error=comment -Wno-error=deprecated-non-prototype|' "$TOOLS_DEF_TEMPLATE"
        ok "Enhanced GCC151 configuration applied"
    else
        ok "GCC151 configuration already enhanced"
    fi
else
    warn "tools_def.template not found, GCC151 configuration skipped"
fi

ok "Enhanced GCC151 configuration completed!"

# Recompile BaseTools
say "Recompiling BaseTools..."
cd BaseTools
make clean
make
cd ..

# Verify if BaseTools was compiled successfully - ENHANCED CHECK
say "Verifying BaseTools compilation..."
BASE_TOOLS_FILES=(
    "BaseTools/Source/C/bin/GenFw"
    "BaseTools/Source/C/bin/GenFv"
    "BaseTools/Source/C/bin/GenFfs"
    "BaseTools/Source/C/bin/GenSec"
    "BaseTools/Source/C/bin/GenCrc32"
    "BaseTools/Source/C/bin/EfiRom"
    "BaseTools/Source/C/bin/EfiLdrImage"
    "BaseTools/Source/C/bin/DevicePath"
    "BaseTools/Source/C/bin/VolInfo"
    "BaseTools/Source/C/bin/Split"
    "BaseTools/Source/C/bin/TianoCompress"
    "BaseTools/Source/C/bin/LzmaCompress"
    "BaseTools/Source/C/bin/Brotli"
    "BaseTools/Source/C/bin/VfrCompile"
)

MISSING_FILES=()
for file in "${BASE_TOOLS_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -eq 0 ]; then
    ok "BaseTools compiled successfully - All tools present!"
else
    warn "Some BaseTools files are missing:"
    for file in "${MISSING_FILES[@]}"; do
        warn "  - $file"
    done
    err "BaseTools compilation may be incomplete."
    exit 1
fi

# Configure environment variables
export WORKSPACE="$REPO_DIR"
export EDK_TOOLS_PATH="$REPO_DIR/BaseTools"

# CRITICAL FIX 3: Replacing native buildme to newest one
say "=== Replacing buildme with the latest fixed version ==="

BUILDME_FILE="buildme"
BUILDME_URL="https://github.com/YBronst/CloverBuildScripts/releases/download/v1.0/buildme"

# Backup old buildme if exists
if [ -f "$BUILDME_FILE" ]; then
    mv -n "$BUILDME_FILE" "${BUILDME_FILE}.backup"
    ok "Old buildme backed up as ${BUILDME_FILE}.backup"
fi

# Download latest buildme
curl -L -o "$BUILDME_FILE" "$BUILDME_URL"

# Make executable
chmod +x "$BUILDME_FILE"
ok "New buildme downloaded and made executable successfully!"

# Enhanced verification of applied fixes
say "=== Verifying Enhanced Applied Fixes ==="

# Verify AcpiParser.h fix
if [ -f "$ACPI_PARSER_H" ]; then
    if grep -q "/*  DEBUG (( " "$ACPI_PARSER_H" || ! grep -q "//  DEBUG (( \\\\" "$ACPI_PARSER_H"; then
        ok "AcpiParser.h multi-line comment fix verified"
    else
        warn "AcpiParser.h multi-line comment fix may not have worked completely"
    fi
fi

# Verify AcpiParser.c fix
if [ -f "$ACPI_PARSER_C" ]; then
    if grep -q "// UINT8.*\*ScopeNameStart; // Unused variable - Fixed by v7" "$ACPI_PARSER_C"; then
        ok "AcpiParser.c unused variable fix verified"
    else
        warn "AcpiParser.c unused variable fix may not have worked completely"
    fi
fi

# Verify GCC151 configuration
if [ -f "$TOOLS_DEF_TEMPLATE" ]; then
    if grep -q "GCC151.*-Wno-error=unused-but-set-variable.*-Wno-error=comment" "$TOOLS_DEF_TEMPLATE"; then
        ok "Enhanced GCC151 configuration verified"
    else
        warn "Enhanced GCC151 configuration may not have worked completely"
    fi
fi

# Final summary
echo
say "=== ENHANCED SETUP COMPLETE! ==="
ok "Clover repository downloaded and configured successfully!"
ok "All Python tools and dependencies installed/updated!"
ok "Enhanced source code fixes applied!"
ok "Enhanced GCC151 configuration optimized!"
ok "BaseTools compiled successfully!"
ok "The newest version of buildme is on his place!"
ok "Ready for robust build without external tool downloads!"
echo

# Show Python configuration
say "=== Python Configuration Summary ==="
say "Python command: $PYTHON_CMD"
say "Python version: $PYTHON_VERSION"
say "Python path: $PYTHON_PATH"
if [ -L "/usr/local/bin/python" ]; then
    ok "✓ /usr/local/bin/python symlink exists"
else
    warn "⚠ /usr/local/bin/python symlink missing (run with sudo to create)"
fi
if [ -L "/usr/local/bin/python3" ]; then
    ok "✓ /usr/local/bin/python3 symlink exists"
else
    warn "⚠ /usr/local/bin/python3 symlink missing (run with sudo to create)"
fi
echo

# Setup complete - ask user preference
echo
say "=== SETUP COMPLETE! ==="
ok "All fixes applied and BaseTools compiled successfully!"
echo
read -p "Do you want to run buildme now? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    say "Starting buildme..."
    sleep 1
    echo
    # Replace current process with buildme for clean execution
    exec ./buildme
else
    say "To start building Clover later, run: ./buildme"
    say "Recommended option: 2 (build all) for complete build"
fi
